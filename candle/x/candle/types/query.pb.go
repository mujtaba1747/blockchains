// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: candle/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetBidMapRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetBidMapRequest) Reset()         { *m = QueryGetBidMapRequest{} }
func (m *QueryGetBidMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBidMapRequest) ProtoMessage()    {}
func (*QueryGetBidMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89604a107e01a88, []int{0}
}
func (m *QueryGetBidMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBidMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBidMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBidMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBidMapRequest.Merge(m, src)
}
func (m *QueryGetBidMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBidMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBidMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBidMapRequest proto.InternalMessageInfo

func (m *QueryGetBidMapRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetBidMapResponse struct {
	BidMap *BidMap `protobuf:"bytes,1,opt,name=BidMap,proto3" json:"BidMap,omitempty"`
}

func (m *QueryGetBidMapResponse) Reset()         { *m = QueryGetBidMapResponse{} }
func (m *QueryGetBidMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBidMapResponse) ProtoMessage()    {}
func (*QueryGetBidMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89604a107e01a88, []int{1}
}
func (m *QueryGetBidMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBidMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBidMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBidMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBidMapResponse.Merge(m, src)
}
func (m *QueryGetBidMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBidMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBidMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBidMapResponse proto.InternalMessageInfo

func (m *QueryGetBidMapResponse) GetBidMap() *BidMap {
	if m != nil {
		return m.BidMap
	}
	return nil
}

type QueryAllBidMapRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBidMapRequest) Reset()         { *m = QueryAllBidMapRequest{} }
func (m *QueryAllBidMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBidMapRequest) ProtoMessage()    {}
func (*QueryAllBidMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89604a107e01a88, []int{2}
}
func (m *QueryAllBidMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBidMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBidMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBidMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBidMapRequest.Merge(m, src)
}
func (m *QueryAllBidMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBidMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBidMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBidMapRequest proto.InternalMessageInfo

func (m *QueryAllBidMapRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBidMapResponse struct {
	BidMap     []*BidMap           `protobuf:"bytes,1,rep,name=BidMap,proto3" json:"BidMap,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBidMapResponse) Reset()         { *m = QueryAllBidMapResponse{} }
func (m *QueryAllBidMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBidMapResponse) ProtoMessage()    {}
func (*QueryAllBidMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89604a107e01a88, []int{3}
}
func (m *QueryAllBidMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBidMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBidMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBidMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBidMapResponse.Merge(m, src)
}
func (m *QueryAllBidMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBidMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBidMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBidMapResponse proto.InternalMessageInfo

func (m *QueryAllBidMapResponse) GetBidMap() []*BidMap {
	if m != nil {
		return m.BidMap
	}
	return nil
}

func (m *QueryAllBidMapResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetResultsMapRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetResultsMapRequest) Reset()         { *m = QueryGetResultsMapRequest{} }
func (m *QueryGetResultsMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetResultsMapRequest) ProtoMessage()    {}
func (*QueryGetResultsMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89604a107e01a88, []int{4}
}
func (m *QueryGetResultsMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetResultsMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetResultsMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetResultsMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetResultsMapRequest.Merge(m, src)
}
func (m *QueryGetResultsMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetResultsMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetResultsMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetResultsMapRequest proto.InternalMessageInfo

func (m *QueryGetResultsMapRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetResultsMapResponse struct {
	ResultsMap *ResultsMap `protobuf:"bytes,1,opt,name=ResultsMap,proto3" json:"ResultsMap,omitempty"`
}

func (m *QueryGetResultsMapResponse) Reset()         { *m = QueryGetResultsMapResponse{} }
func (m *QueryGetResultsMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetResultsMapResponse) ProtoMessage()    {}
func (*QueryGetResultsMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89604a107e01a88, []int{5}
}
func (m *QueryGetResultsMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetResultsMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetResultsMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetResultsMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetResultsMapResponse.Merge(m, src)
}
func (m *QueryGetResultsMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetResultsMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetResultsMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetResultsMapResponse proto.InternalMessageInfo

func (m *QueryGetResultsMapResponse) GetResultsMap() *ResultsMap {
	if m != nil {
		return m.ResultsMap
	}
	return nil
}

type QueryAllResultsMapRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllResultsMapRequest) Reset()         { *m = QueryAllResultsMapRequest{} }
func (m *QueryAllResultsMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllResultsMapRequest) ProtoMessage()    {}
func (*QueryAllResultsMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89604a107e01a88, []int{6}
}
func (m *QueryAllResultsMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllResultsMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllResultsMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllResultsMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllResultsMapRequest.Merge(m, src)
}
func (m *QueryAllResultsMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllResultsMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllResultsMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllResultsMapRequest proto.InternalMessageInfo

func (m *QueryAllResultsMapRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllResultsMapResponse struct {
	ResultsMap []*ResultsMap       `protobuf:"bytes,1,rep,name=ResultsMap,proto3" json:"ResultsMap,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllResultsMapResponse) Reset()         { *m = QueryAllResultsMapResponse{} }
func (m *QueryAllResultsMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllResultsMapResponse) ProtoMessage()    {}
func (*QueryAllResultsMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89604a107e01a88, []int{7}
}
func (m *QueryAllResultsMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllResultsMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllResultsMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllResultsMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllResultsMapResponse.Merge(m, src)
}
func (m *QueryAllResultsMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllResultsMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllResultsMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllResultsMapResponse proto.InternalMessageInfo

func (m *QueryAllResultsMapResponse) GetResultsMap() []*ResultsMap {
	if m != nil {
		return m.ResultsMap
	}
	return nil
}

func (m *QueryAllResultsMapResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBidListRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetBidListRequest) Reset()         { *m = QueryGetBidListRequest{} }
func (m *QueryGetBidListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBidListRequest) ProtoMessage()    {}
func (*QueryGetBidListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89604a107e01a88, []int{8}
}
func (m *QueryGetBidListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBidListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBidListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBidListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBidListRequest.Merge(m, src)
}
func (m *QueryGetBidListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBidListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBidListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBidListRequest proto.InternalMessageInfo

func (m *QueryGetBidListRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetBidListResponse struct {
	BidList *BidList `protobuf:"bytes,1,opt,name=BidList,proto3" json:"BidList,omitempty"`
}

func (m *QueryGetBidListResponse) Reset()         { *m = QueryGetBidListResponse{} }
func (m *QueryGetBidListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBidListResponse) ProtoMessage()    {}
func (*QueryGetBidListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89604a107e01a88, []int{9}
}
func (m *QueryGetBidListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBidListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBidListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBidListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBidListResponse.Merge(m, src)
}
func (m *QueryGetBidListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBidListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBidListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBidListResponse proto.InternalMessageInfo

func (m *QueryGetBidListResponse) GetBidList() *BidList {
	if m != nil {
		return m.BidList
	}
	return nil
}

type QueryAllBidListRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBidListRequest) Reset()         { *m = QueryAllBidListRequest{} }
func (m *QueryAllBidListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBidListRequest) ProtoMessage()    {}
func (*QueryAllBidListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89604a107e01a88, []int{10}
}
func (m *QueryAllBidListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBidListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBidListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBidListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBidListRequest.Merge(m, src)
}
func (m *QueryAllBidListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBidListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBidListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBidListRequest proto.InternalMessageInfo

func (m *QueryAllBidListRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBidListResponse struct {
	BidList    []*BidList          `protobuf:"bytes,1,rep,name=BidList,proto3" json:"BidList,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBidListResponse) Reset()         { *m = QueryAllBidListResponse{} }
func (m *QueryAllBidListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBidListResponse) ProtoMessage()    {}
func (*QueryAllBidListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89604a107e01a88, []int{11}
}
func (m *QueryAllBidListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBidListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBidListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBidListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBidListResponse.Merge(m, src)
}
func (m *QueryAllBidListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBidListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBidListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBidListResponse proto.InternalMessageInfo

func (m *QueryAllBidListResponse) GetBidList() []*BidList {
	if m != nil {
		return m.BidList
	}
	return nil
}

func (m *QueryAllBidListResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAuctionMapRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetAuctionMapRequest) Reset()         { *m = QueryGetAuctionMapRequest{} }
func (m *QueryGetAuctionMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuctionMapRequest) ProtoMessage()    {}
func (*QueryGetAuctionMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89604a107e01a88, []int{12}
}
func (m *QueryGetAuctionMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuctionMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuctionMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuctionMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuctionMapRequest.Merge(m, src)
}
func (m *QueryGetAuctionMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuctionMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuctionMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuctionMapRequest proto.InternalMessageInfo

func (m *QueryGetAuctionMapRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetAuctionMapResponse struct {
	AuctionMap *AuctionMap `protobuf:"bytes,1,opt,name=AuctionMap,proto3" json:"AuctionMap,omitempty"`
}

func (m *QueryGetAuctionMapResponse) Reset()         { *m = QueryGetAuctionMapResponse{} }
func (m *QueryGetAuctionMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAuctionMapResponse) ProtoMessage()    {}
func (*QueryGetAuctionMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89604a107e01a88, []int{13}
}
func (m *QueryGetAuctionMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAuctionMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAuctionMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAuctionMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAuctionMapResponse.Merge(m, src)
}
func (m *QueryGetAuctionMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAuctionMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAuctionMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAuctionMapResponse proto.InternalMessageInfo

func (m *QueryGetAuctionMapResponse) GetAuctionMap() *AuctionMap {
	if m != nil {
		return m.AuctionMap
	}
	return nil
}

type QueryAllAuctionMapRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAuctionMapRequest) Reset()         { *m = QueryAllAuctionMapRequest{} }
func (m *QueryAllAuctionMapRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAuctionMapRequest) ProtoMessage()    {}
func (*QueryAllAuctionMapRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89604a107e01a88, []int{14}
}
func (m *QueryAllAuctionMapRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAuctionMapRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAuctionMapRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAuctionMapRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAuctionMapRequest.Merge(m, src)
}
func (m *QueryAllAuctionMapRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAuctionMapRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAuctionMapRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAuctionMapRequest proto.InternalMessageInfo

func (m *QueryAllAuctionMapRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAuctionMapResponse struct {
	AuctionMap []*AuctionMap       `protobuf:"bytes,1,rep,name=AuctionMap,proto3" json:"AuctionMap,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAuctionMapResponse) Reset()         { *m = QueryAllAuctionMapResponse{} }
func (m *QueryAllAuctionMapResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAuctionMapResponse) ProtoMessage()    {}
func (*QueryAllAuctionMapResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89604a107e01a88, []int{15}
}
func (m *QueryAllAuctionMapResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAuctionMapResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAuctionMapResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAuctionMapResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAuctionMapResponse.Merge(m, src)
}
func (m *QueryAllAuctionMapResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAuctionMapResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAuctionMapResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAuctionMapResponse proto.InternalMessageInfo

func (m *QueryAllAuctionMapResponse) GetAuctionMap() []*AuctionMap {
	if m != nil {
		return m.AuctionMap
	}
	return nil
}

func (m *QueryAllAuctionMapResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetBidMapRequest)(nil), "hello.candle.candle.QueryGetBidMapRequest")
	proto.RegisterType((*QueryGetBidMapResponse)(nil), "hello.candle.candle.QueryGetBidMapResponse")
	proto.RegisterType((*QueryAllBidMapRequest)(nil), "hello.candle.candle.QueryAllBidMapRequest")
	proto.RegisterType((*QueryAllBidMapResponse)(nil), "hello.candle.candle.QueryAllBidMapResponse")
	proto.RegisterType((*QueryGetResultsMapRequest)(nil), "hello.candle.candle.QueryGetResultsMapRequest")
	proto.RegisterType((*QueryGetResultsMapResponse)(nil), "hello.candle.candle.QueryGetResultsMapResponse")
	proto.RegisterType((*QueryAllResultsMapRequest)(nil), "hello.candle.candle.QueryAllResultsMapRequest")
	proto.RegisterType((*QueryAllResultsMapResponse)(nil), "hello.candle.candle.QueryAllResultsMapResponse")
	proto.RegisterType((*QueryGetBidListRequest)(nil), "hello.candle.candle.QueryGetBidListRequest")
	proto.RegisterType((*QueryGetBidListResponse)(nil), "hello.candle.candle.QueryGetBidListResponse")
	proto.RegisterType((*QueryAllBidListRequest)(nil), "hello.candle.candle.QueryAllBidListRequest")
	proto.RegisterType((*QueryAllBidListResponse)(nil), "hello.candle.candle.QueryAllBidListResponse")
	proto.RegisterType((*QueryGetAuctionMapRequest)(nil), "hello.candle.candle.QueryGetAuctionMapRequest")
	proto.RegisterType((*QueryGetAuctionMapResponse)(nil), "hello.candle.candle.QueryGetAuctionMapResponse")
	proto.RegisterType((*QueryAllAuctionMapRequest)(nil), "hello.candle.candle.QueryAllAuctionMapRequest")
	proto.RegisterType((*QueryAllAuctionMapResponse)(nil), "hello.candle.candle.QueryAllAuctionMapResponse")
}

func init() { proto.RegisterFile("candle/query.proto", fileDescriptor_c89604a107e01a88) }

var fileDescriptor_c89604a107e01a88 = []byte{
	// 738 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0xcf, 0x4f, 0xd4, 0x40,
	0x14, 0xc7, 0x99, 0x5d, 0xc1, 0x30, 0x46, 0x0f, 0x23, 0x28, 0x2e, 0x58, 0xa4, 0x28, 0x3f, 0xb5,
	0x0d, 0x90, 0x78, 0xd5, 0xe5, 0x20, 0x17, 0x49, 0x64, 0x8f, 0x26, 0x06, 0x67, 0xb7, 0x93, 0x65,
	0x92, 0xa1, 0x2d, 0x3b, 0x5d, 0x03, 0x21, 0x5c, 0xbc, 0x79, 0xf0, 0x47, 0x62, 0x62, 0xa2, 0x07,
	0x8f, 0xfe, 0x1d, 0x1e, 0x3d, 0x92, 0x78, 0xf1, 0x68, 0xc0, 0x3f, 0xc4, 0xec, 0xf4, 0xed, 0x76,
	0xba, 0x2d, 0x6d, 0x37, 0x59, 0x4e, 0xc0, 0xf4, 0x7d, 0xe7, 0x7d, 0xde, 0x77, 0xde, 0xbc, 0x01,
	0x93, 0x06, 0x75, 0x1d, 0xc1, 0xec, 0x83, 0x36, 0x6b, 0x1d, 0x59, 0x7e, 0xcb, 0x0b, 0x3c, 0x72,
	0x73, 0x8f, 0x09, 0xe1, 0x59, 0xe1, 0x17, 0xf8, 0x51, 0x99, 0x69, 0x7a, 0x5e, 0x53, 0x30, 0x9b,
	0xfa, 0xdc, 0xa6, 0xae, 0xeb, 0x05, 0x34, 0xe0, 0x9e, 0x2b, 0x43, 0x49, 0x65, 0xa5, 0xe1, 0xc9,
	0x7d, 0x4f, 0xda, 0x75, 0x2a, 0x61, 0x2f, 0xfb, 0xcd, 0x5a, 0x9d, 0x05, 0x74, 0xcd, 0xf6, 0x69,
	0x93, 0xbb, 0x2a, 0x18, 0x62, 0x27, 0x20, 0x65, 0x9d, 0x3b, 0xbb, 0xfb, 0xd4, 0x87, 0xd5, 0x29,
	0x58, 0x6d, 0x31, 0xd9, 0x16, 0x81, 0xd4, 0xbe, 0x4c, 0x6a, 0xf1, 0x82, 0xcb, 0xa0, 0x4f, 0x40,
	0xdb, 0x8d, 0xce, 0xe6, 0x91, 0xc0, 0x7c, 0x84, 0x27, 0x77, 0x3a, 0x08, 0x5b, 0x2c, 0xd8, 0xe4,
	0xce, 0x36, 0xf5, 0x6b, 0xec, 0xa0, 0xcd, 0x64, 0x40, 0x26, 0xf0, 0x28, 0x77, 0x1d, 0x76, 0x38,
	0x85, 0xee, 0xa1, 0xa5, 0xf1, 0x5a, 0xf8, 0x87, 0xb9, 0x8d, 0x6f, 0xf5, 0x87, 0x4b, 0xdf, 0x73,
	0x25, 0x23, 0x1b, 0x78, 0x2c, 0x5c, 0x51, 0x82, 0x6b, 0xeb, 0xd3, 0x56, 0x8a, 0x33, 0x16, 0x88,
	0x20, 0xd4, 0xdc, 0x85, 0xec, 0x55, 0x21, 0xe2, 0xd9, 0x9f, 0x61, 0x1c, 0x79, 0x01, 0x3b, 0x2e,
	0x58, 0xa1, 0x71, 0x56, 0xc7, 0x38, 0x2b, 0x3c, 0x04, 0x30, 0xce, 0x7a, 0x41, 0x9b, 0x0c, 0xb4,
	0x35, 0x4d, 0x69, 0x7e, 0x41, 0x00, 0xac, 0x65, 0x48, 0x01, 0x2e, 0x17, 0x04, 0x26, 0x5b, 0x31,
	0xae, 0x92, 0xe2, 0x5a, 0xcc, 0xe5, 0x0a, 0x33, 0xc6, 0xc0, 0xd6, 0xf0, 0x9d, 0xae, 0x91, 0xb5,
	0xf0, 0x14, 0x73, 0xbd, 0x7f, 0x85, 0x2b, 0x69, 0x12, 0x28, 0xe7, 0x09, 0xc6, 0xd1, 0x2a, 0x38,
	0x36, 0x9b, 0x5a, 0x92, 0x26, 0xd6, 0x24, 0x66, 0x03, 0x88, 0xaa, 0x42, 0x24, 0x89, 0x86, 0x75,
	0x1e, 0x3f, 0x10, 0x14, 0xd1, 0x97, 0xe5, 0x82, 0x22, 0xca, 0x03, 0x16, 0x31, 0xbc, 0xf3, 0x59,
	0x8a, 0x35, 0xfa, 0x73, 0x2e, 0x83, 0xae, 0x15, 0x37, 0x70, 0x89, 0x3b, 0xca, 0x82, 0x2b, 0xb5,
	0x12, 0x77, 0xcc, 0x1d, 0x7c, 0x3b, 0x11, 0x09, 0xe5, 0x3c, 0xc6, 0x57, 0x61, 0x09, 0x2c, 0x9b,
	0xb9, 0xa8, 0xc7, 0x94, 0xac, 0x1b, 0x6c, 0xbe, 0x8e, 0x35, 0xad, 0x9e, 0x7c, 0x58, 0xe7, 0xf0,
	0x0d, 0x01, 0xb5, 0x9e, 0x22, 0x8d, 0xba, 0x5c, 0x98, 0xfa, 0x52, 0xee, 0x46, 0x35, 0x1c, 0x58,
	0x83, 0xdc, 0x0d, 0x5d, 0x12, 0xb5, 0x55, 0xb4, 0x9a, 0x79, 0x37, 0x34, 0xb1, 0x26, 0xd1, 0xef,
	0x46, 0x92, 0xe8, 0x32, 0xee, 0x46, 0x81, 0x22, 0xca, 0x03, 0x16, 0x31, 0xb4, 0xf3, 0x59, 0xff,
	0x39, 0x8e, 0x47, 0x15, 0x28, 0xf9, 0x80, 0xba, 0x43, 0x94, 0xac, 0xa4, 0xa2, 0xa4, 0xbe, 0x2d,
	0x95, 0xd5, 0x42, 0xb1, 0x61, 0x66, 0x73, 0xf5, 0xed, 0xef, 0x7f, 0x9f, 0x4b, 0x0f, 0xc8, 0xbc,
	0xad, 0x44, 0x36, 0x3c, 0x65, 0xd1, 0x43, 0xb7, 0x4d, 0x7d, 0xfb, 0x58, 0xb5, 0xc1, 0x09, 0x79,
	0x87, 0xf0, 0x78, 0xa8, 0xaf, 0x0a, 0x91, 0xc5, 0xd4, 0xff, 0xe2, 0x64, 0x31, 0x25, 0xde, 0x0e,
	0x73, 0x5e, 0x31, 0xdd, 0x25, 0xd3, 0x19, 0x4c, 0xe4, 0x3b, 0xd2, 0xa7, 0x19, 0xb1, 0x32, 0x8b,
	0x4e, 0x8c, 0xdc, 0x8a, 0x5d, 0x38, 0x1e, 0xa0, 0x6c, 0x05, 0xb5, 0x4c, 0x16, 0x53, 0xa1, 0x5a,
	0x3d, 0x41, 0xcf, 0xac, 0xaf, 0x08, 0x5f, 0x8f, 0xf6, 0xe9, 0x18, 0x66, 0x65, 0x9a, 0x30, 0x10,
	0x63, 0xea, 0x80, 0x37, 0x17, 0x15, 0xe3, 0x1c, 0x99, 0xcd, 0x61, 0x24, 0x1f, 0x51, 0x6f, 0x0a,
	0x91, 0xdc, 0x76, 0xd1, 0x26, 0x64, 0xe5, 0x61, 0xb1, 0x60, 0xe0, 0x59, 0x56, 0x3c, 0xf3, 0x64,
	0xee, 0xa2, 0x83, 0xec, 0x44, 0xdb, 0xc7, 0xdc, 0x39, 0x21, 0xef, 0x11, 0xc6, 0x20, 0xef, 0x58,
	0x95, 0xdb, 0x2f, 0x05, 0xa1, 0x92, 0x03, 0xd8, 0xbc, 0xaf, 0xa0, 0x0c, 0x32, 0x93, 0x05, 0xa5,
	0xda, 0x4b, 0xbb, 0xdd, 0xd9, 0xed, 0x95, 0x98, 0x5a, 0x39, 0xed, 0x95, 0x9c, 0x3f, 0x39, 0xed,
	0x45, 0x7b, 0x82, 0x58, 0x7b, 0x45, 0xfb, 0xe4, 0xb7, 0xd7, 0x40, 0x8c, 0xa9, 0x33, 0x32, 0xa7,
	0xbd, 0x22, 0xc6, 0xcd, 0xa7, 0xbf, 0xce, 0x0c, 0x74, 0x7a, 0x66, 0xa0, 0xbf, 0x67, 0x06, 0xfa,
	0x74, 0x6e, 0x8c, 0x9c, 0x9e, 0x1b, 0x23, 0x7f, 0xce, 0x8d, 0x91, 0x97, 0x0b, 0x4d, 0x1e, 0xec,
	0xb5, 0xeb, 0x56, 0xc3, 0xdb, 0x8f, 0x6f, 0x72, 0xd8, 0xfd, 0x25, 0x38, 0xf2, 0x99, 0xac, 0x8f,
	0xa9, 0xff, 0x9f, 0x37, 0xfe, 0x07, 0x00, 0x00, 0xff, 0xff, 0x24, 0xe1, 0x53, 0x74, 0x15, 0x0c,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a bidMap by index.
	BidMap(ctx context.Context, in *QueryGetBidMapRequest, opts ...grpc.CallOption) (*QueryGetBidMapResponse, error)
	// Queries a list of bidMap items.
	BidMapAll(ctx context.Context, in *QueryAllBidMapRequest, opts ...grpc.CallOption) (*QueryAllBidMapResponse, error)
	// Queries a resultsMap by index.
	ResultsMap(ctx context.Context, in *QueryGetResultsMapRequest, opts ...grpc.CallOption) (*QueryGetResultsMapResponse, error)
	// Queries a list of resultsMap items.
	ResultsMapAll(ctx context.Context, in *QueryAllResultsMapRequest, opts ...grpc.CallOption) (*QueryAllResultsMapResponse, error)
	// Queries a bidList by id.
	BidList(ctx context.Context, in *QueryGetBidListRequest, opts ...grpc.CallOption) (*QueryGetBidListResponse, error)
	// Queries a list of bidList items.
	BidListAll(ctx context.Context, in *QueryAllBidListRequest, opts ...grpc.CallOption) (*QueryAllBidListResponse, error)
	// Queries a auctionMap by index.
	AuctionMap(ctx context.Context, in *QueryGetAuctionMapRequest, opts ...grpc.CallOption) (*QueryGetAuctionMapResponse, error)
	// Queries a list of auctionMap items.
	AuctionMapAll(ctx context.Context, in *QueryAllAuctionMapRequest, opts ...grpc.CallOption) (*QueryAllAuctionMapResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) BidMap(ctx context.Context, in *QueryGetBidMapRequest, opts ...grpc.CallOption) (*QueryGetBidMapResponse, error) {
	out := new(QueryGetBidMapResponse)
	err := c.cc.Invoke(ctx, "/hello.candle.candle.Query/BidMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BidMapAll(ctx context.Context, in *QueryAllBidMapRequest, opts ...grpc.CallOption) (*QueryAllBidMapResponse, error) {
	out := new(QueryAllBidMapResponse)
	err := c.cc.Invoke(ctx, "/hello.candle.candle.Query/BidMapAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ResultsMap(ctx context.Context, in *QueryGetResultsMapRequest, opts ...grpc.CallOption) (*QueryGetResultsMapResponse, error) {
	out := new(QueryGetResultsMapResponse)
	err := c.cc.Invoke(ctx, "/hello.candle.candle.Query/ResultsMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ResultsMapAll(ctx context.Context, in *QueryAllResultsMapRequest, opts ...grpc.CallOption) (*QueryAllResultsMapResponse, error) {
	out := new(QueryAllResultsMapResponse)
	err := c.cc.Invoke(ctx, "/hello.candle.candle.Query/ResultsMapAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BidList(ctx context.Context, in *QueryGetBidListRequest, opts ...grpc.CallOption) (*QueryGetBidListResponse, error) {
	out := new(QueryGetBidListResponse)
	err := c.cc.Invoke(ctx, "/hello.candle.candle.Query/BidList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BidListAll(ctx context.Context, in *QueryAllBidListRequest, opts ...grpc.CallOption) (*QueryAllBidListResponse, error) {
	out := new(QueryAllBidListResponse)
	err := c.cc.Invoke(ctx, "/hello.candle.candle.Query/BidListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuctionMap(ctx context.Context, in *QueryGetAuctionMapRequest, opts ...grpc.CallOption) (*QueryGetAuctionMapResponse, error) {
	out := new(QueryGetAuctionMapResponse)
	err := c.cc.Invoke(ctx, "/hello.candle.candle.Query/AuctionMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AuctionMapAll(ctx context.Context, in *QueryAllAuctionMapRequest, opts ...grpc.CallOption) (*QueryAllAuctionMapResponse, error) {
	out := new(QueryAllAuctionMapResponse)
	err := c.cc.Invoke(ctx, "/hello.candle.candle.Query/AuctionMapAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a bidMap by index.
	BidMap(context.Context, *QueryGetBidMapRequest) (*QueryGetBidMapResponse, error)
	// Queries a list of bidMap items.
	BidMapAll(context.Context, *QueryAllBidMapRequest) (*QueryAllBidMapResponse, error)
	// Queries a resultsMap by index.
	ResultsMap(context.Context, *QueryGetResultsMapRequest) (*QueryGetResultsMapResponse, error)
	// Queries a list of resultsMap items.
	ResultsMapAll(context.Context, *QueryAllResultsMapRequest) (*QueryAllResultsMapResponse, error)
	// Queries a bidList by id.
	BidList(context.Context, *QueryGetBidListRequest) (*QueryGetBidListResponse, error)
	// Queries a list of bidList items.
	BidListAll(context.Context, *QueryAllBidListRequest) (*QueryAllBidListResponse, error)
	// Queries a auctionMap by index.
	AuctionMap(context.Context, *QueryGetAuctionMapRequest) (*QueryGetAuctionMapResponse, error)
	// Queries a list of auctionMap items.
	AuctionMapAll(context.Context, *QueryAllAuctionMapRequest) (*QueryAllAuctionMapResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) BidMap(ctx context.Context, req *QueryGetBidMapRequest) (*QueryGetBidMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BidMap not implemented")
}
func (*UnimplementedQueryServer) BidMapAll(ctx context.Context, req *QueryAllBidMapRequest) (*QueryAllBidMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BidMapAll not implemented")
}
func (*UnimplementedQueryServer) ResultsMap(ctx context.Context, req *QueryGetResultsMapRequest) (*QueryGetResultsMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResultsMap not implemented")
}
func (*UnimplementedQueryServer) ResultsMapAll(ctx context.Context, req *QueryAllResultsMapRequest) (*QueryAllResultsMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResultsMapAll not implemented")
}
func (*UnimplementedQueryServer) BidList(ctx context.Context, req *QueryGetBidListRequest) (*QueryGetBidListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BidList not implemented")
}
func (*UnimplementedQueryServer) BidListAll(ctx context.Context, req *QueryAllBidListRequest) (*QueryAllBidListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BidListAll not implemented")
}
func (*UnimplementedQueryServer) AuctionMap(ctx context.Context, req *QueryGetAuctionMapRequest) (*QueryGetAuctionMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionMap not implemented")
}
func (*UnimplementedQueryServer) AuctionMapAll(ctx context.Context, req *QueryAllAuctionMapRequest) (*QueryAllAuctionMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuctionMapAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_BidMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBidMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BidMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.candle.candle.Query/BidMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BidMap(ctx, req.(*QueryGetBidMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BidMapAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBidMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BidMapAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.candle.candle.Query/BidMapAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BidMapAll(ctx, req.(*QueryAllBidMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ResultsMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetResultsMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ResultsMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.candle.candle.Query/ResultsMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ResultsMap(ctx, req.(*QueryGetResultsMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ResultsMapAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllResultsMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ResultsMapAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.candle.candle.Query/ResultsMapAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ResultsMapAll(ctx, req.(*QueryAllResultsMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BidList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBidListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BidList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.candle.candle.Query/BidList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BidList(ctx, req.(*QueryGetBidListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BidListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBidListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BidListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.candle.candle.Query/BidListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BidListAll(ctx, req.(*QueryAllBidListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuctionMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAuctionMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuctionMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.candle.candle.Query/AuctionMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuctionMap(ctx, req.(*QueryGetAuctionMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AuctionMapAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAuctionMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AuctionMapAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hello.candle.candle.Query/AuctionMapAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AuctionMapAll(ctx, req.(*QueryAllAuctionMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hello.candle.candle.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BidMap",
			Handler:    _Query_BidMap_Handler,
		},
		{
			MethodName: "BidMapAll",
			Handler:    _Query_BidMapAll_Handler,
		},
		{
			MethodName: "ResultsMap",
			Handler:    _Query_ResultsMap_Handler,
		},
		{
			MethodName: "ResultsMapAll",
			Handler:    _Query_ResultsMapAll_Handler,
		},
		{
			MethodName: "BidList",
			Handler:    _Query_BidList_Handler,
		},
		{
			MethodName: "BidListAll",
			Handler:    _Query_BidListAll_Handler,
		},
		{
			MethodName: "AuctionMap",
			Handler:    _Query_AuctionMap_Handler,
		},
		{
			MethodName: "AuctionMapAll",
			Handler:    _Query_AuctionMapAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "candle/query.proto",
}

func (m *QueryGetBidMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBidMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBidMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBidMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBidMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBidMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BidMap != nil {
		{
			size, err := m.BidMap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBidMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBidMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBidMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBidMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBidMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBidMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BidMap) > 0 {
		for iNdEx := len(m.BidMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BidMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetResultsMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetResultsMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetResultsMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetResultsMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetResultsMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetResultsMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResultsMap != nil {
		{
			size, err := m.ResultsMap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllResultsMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllResultsMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllResultsMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllResultsMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllResultsMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllResultsMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ResultsMap) > 0 {
		for iNdEx := len(m.ResultsMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ResultsMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBidListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBidListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBidListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBidListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBidListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBidListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BidList != nil {
		{
			size, err := m.BidList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBidListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBidListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBidListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBidListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBidListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBidListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BidList) > 0 {
		for iNdEx := len(m.BidList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BidList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAuctionMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuctionMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuctionMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAuctionMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAuctionMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAuctionMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionMap != nil {
		{
			size, err := m.AuctionMap.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAuctionMapRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAuctionMapRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAuctionMapRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAuctionMapResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAuctionMapResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAuctionMapResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.AuctionMap) > 0 {
		for iNdEx := len(m.AuctionMap) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuctionMap[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetBidMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBidMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BidMap != nil {
		l = m.BidMap.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBidMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBidMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BidMap) > 0 {
		for _, e := range m.BidMap {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetResultsMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetResultsMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ResultsMap != nil {
		l = m.ResultsMap.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllResultsMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllResultsMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ResultsMap) > 0 {
		for _, e := range m.ResultsMap {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBidListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetBidListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BidList != nil {
		l = m.BidList.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBidListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBidListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BidList) > 0 {
		for _, e := range m.BidList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAuctionMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAuctionMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionMap != nil {
		l = m.AuctionMap.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAuctionMapRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAuctionMapResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AuctionMap) > 0 {
		for _, e := range m.AuctionMap {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetBidMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBidMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBidMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBidMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBidMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBidMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BidMap == nil {
				m.BidMap = &BidMap{}
			}
			if err := m.BidMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBidMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBidMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBidMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBidMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBidMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBidMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidMap = append(m.BidMap, &BidMap{})
			if err := m.BidMap[len(m.BidMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetResultsMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetResultsMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetResultsMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetResultsMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetResultsMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetResultsMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultsMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ResultsMap == nil {
				m.ResultsMap = &ResultsMap{}
			}
			if err := m.ResultsMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllResultsMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllResultsMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllResultsMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllResultsMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllResultsMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllResultsMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultsMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultsMap = append(m.ResultsMap, &ResultsMap{})
			if err := m.ResultsMap[len(m.ResultsMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBidListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBidListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBidListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBidListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBidListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBidListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BidList == nil {
				m.BidList = &BidList{}
			}
			if err := m.BidList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBidListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBidListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBidListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBidListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBidListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBidListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BidList = append(m.BidList, &BidList{})
			if err := m.BidList[len(m.BidList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuctionMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuctionMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuctionMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAuctionMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAuctionMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAuctionMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuctionMap == nil {
				m.AuctionMap = &AuctionMap{}
			}
			if err := m.AuctionMap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAuctionMapRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAuctionMapRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAuctionMapRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAuctionMapResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAuctionMapResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAuctionMapResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionMap = append(m.AuctionMap, &AuctionMap{})
			if err := m.AuctionMap[len(m.AuctionMap)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
